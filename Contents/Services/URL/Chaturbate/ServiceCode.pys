#!/usr/bin/env python

"""Chaturbate Service code - Return m3u8 stream"""

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36'}
HTTP_HEADERS_IPAD = {'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 8_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B410 Safari/600.1.4'}

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromURL(url)

    title = html.xpath('//ul[@class="sub-nav"]//a/text()')[0].strip()
    slug = url.rsplit('/', 2)[1]
    #Log.Debug('*' * 80)
    #Log.Debug('* title      = %s' %title)
    #Log.Debug('* slug       = %s' %slug)

    q = []
    a = []
    for node in html.xpath('//div[@class="bio"]//dl/dt'):
        q_text = node.text
        if not q_text == 'About Me:' and not q_text == 'Pics & Videos:' and not q_text == 'Wish List:':
            q.append(q_text.strip())
        else:
            break

    for i, node in enumerate(html.xpath('//div[@class="bio"]//dl/dd')):
        if not i == len(q):
            try:
                a_text = node.text
                a.append(a_text.strip())
            except:
                pass

    #Log.Debug('* q & a      = %s %s' %(q, a))
    #Log.Debug('* q & a len  = %i %i' %(len(q), len(a)))

    summary_list = []
    for x, y in map(None, q, a):
        summary_list.append(x + ' ' + y)

    if len(summary_list) > 0:
        if Client.Product == 'Plex Web':
            summary = '\r'.join(summary_list).strip()
        else:
            summary = '\n'.join(summary_list).strip()
    else:
        summary = None

    # TODO fix year matching
    birth_date = Regex(r'(?m)Birth\s*?Date\:\s*?(.+?)$').search(summary)
    birthday = None
    if birth_date:
        birthday = birth_date.group(1)
        Log(birthday)
        try:
            birthday = int(Datetime.ParseDate(birthday).year)
        except:
            birthday = None

    Log.Debug('* Birthday   = %s' %str(birthday))
    Log.Debug('* Summary    = %s' %summary)
    #Log.Debug('*' * 80)

    time_stamp = int(Datetime.TimestampFromDatetime(Datetime.Now()))
    thumb = 'https://cdn-s.highwebmedia.com/uHK3McUtGCG3SMFcd4ZJsRv8/roomimage/%s.jpg?_=%i' %(slug, time_stamp)
    art = '/:/plugins/com.plexapp.plugins.chaturbate/resources/art-default.jpg?t=%i' %time_stamp

    return VideoClipObject(
        title=title,
        summary=summary,
        content_rating='X',
        year=birthday,
        thumb=thumb,
        art=art)

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts=[PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))],
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
    """Get m3u8 playlist"""

    page = HTTP.Request(url, headers=HTTP_HEADERS_IPAD, cacheTime=10).content

    try:
        m3u8_urls = Regex(r'src\=[\'\"](http[^\'\"]+\.m3u8.*?)[\'\"]').findall(page)
        Log.Debug(u"* m3u8_urls = '{}'".format(m3u8_urls))
    except:
        raise Ex.MediaNotAvailable

    try:
        playlist = HTTP.Request(m3u8_urls[0], cacheTime=10).content
        Log.Debug('* playlist.m3u8  = {}'.format(playlist))
    except:
        raise Ex.MediaNotAvailable

    for line in playlist.splitlines(False)[1:]:
        if line.startswith('#EXT-X-STREAM-INF'):
            stream_search = Regex(r'(?P<bandwidth>\d+).*?\"(?P<codecs>.+?\,.+?)\".*?(?P<resolution>\d+.\d+)').search(line)
            if stream_search:
                Log.Debug('* stream search results = %s' %stream_search.groupdict())
                continue
            else:
                Log.Error('* Error in #EXT-X-STREAM-INF: line | %s' %line)
                Log.Debug('*' * 80)
                raise Ex.MediaNotAvailable

    Log.Debug(u"* PlayVideo URL = '{}'".format(m3u8_urls[0]))
    return IndirectResponse(VideoClipObject, key=m3u8_urls[0])
